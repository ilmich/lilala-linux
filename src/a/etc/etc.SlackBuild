#!/bin/sh

# Slackware build script for etc

# Copyright 2017 Michele Zuccal√† < ardutu at gmail dot com >
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

if [ $UID != "0" ]; then
    echo "You must be logged as root!!!"
    exit 1
fi


PRGNAM=etc
CWD=$(pwd)
TMP=${TMP:-/tmp}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-$PWD}

if [ ! -e $CWD/$PRGNAM.info ]; then
    echo "File $PRGNAM.info not found"
    exit 1
fi

. $CWD/$PRGNAM.info

STRIP_CMD=strip
if [ ! -z "$SLK_TARGET" ]; then
    TARGET=$SLK_TARGET-
    ARCH=`echo $SLK_TARGET | cut -d - -f 1 -`
    STRIP_CMD=$SLK_TARGET-strip
fi

if [ ! -z "$SLK_SYSROOT" ]; then
    SYSROOT=" --sysroot=$SLK_SYSROOT "
fi

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
   armv6) ARCH=armv6 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
elif [ "$ARCH" = "armv6" ]; then
  SLKCFLAGS="-O2 -march=armv6 -mfpu=vfp -mfloat-abi=hard"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
fi

set -e # Exit on most errors

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT

# install files
for i in `find etc -type f`; do
    install -D -m=0644 $i $PKG/$i
done

# change permission for special files
chmod 0644 $PKG/etc/passwd.new
chmod 0700 $PKG/etc/init.d/rc.new

# Copy the slack-desc (and a custom doinst.sh if necessary) into ./install
mkdir -p $PKG/install
cat $CWD/doinst.sh > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

#generate slack-required
if [ ! -z "$DEPS" ]; then
    for i in $DEPS;
    do
	echo $i >> $PKG/install/slack-required
    done
fi

# Make the package; be sure to leave it in $OUTPUT
# If package symlinks need to be created during install *before*
# your custom contents of doinst.sh runs, then add the -p switch to
# the makepkg command below -- see makepkg(8) for details
cd $PKG
mkdir -p $OUTPUT
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  rm -rf $PKG
fi