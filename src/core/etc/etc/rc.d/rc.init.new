#!/bin/sh
# This file is executed on boot to initialize the system and can also be run by
# the user to start/stop daemons.

# Fallback Configuration Values, to be able to run even with a broken, deleted
# or outdated minirc.conf:
UDEV="mdev"
HOSTNAME="$(cat /etc/HOSTNAME)"

on_boot() {
    #===================
    # mount the API filesystem
    # /proc, /sys, /run, /dev, /run/lock, /dev/pts, /dev/shm
    echo_color 2 "mounting filesystem..."
    /bin/mountpoint -q /proc    || /bin/mount -t proc proc /proc -o nosuid,noexec,nodev
    /bin/mountpoint -q /sys     || /bin/mount -t sysfs sys /sys -o nosuid,noexec,nodev
    /bin/mountpoint -q /run     || /bin/mount -t tmpfs run /run -o mode=0755,nosuid,nodev
    /bin/mountpoint -q /dev     || /bin/mount -t devtmpfs dev /dev -o mode=0755,nosuid
    /bin/mkdir -p /dev/pts /dev/shm
    /bin/mountpoint -q /dev/pts || /bin/mount -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
    /bin/mountpoint -q /dev/shm || /bin/mount -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev

    #===================
    # initialize system
    echo_color 2 "setting up loopback device..."
    /bin/ifconfig lo 127.0.0.1

    # Determine the version of the running kernel:
    RELEASE=$(uname -r)

    /bin/mount -o remount,rw /

    # Update kernel module dependencies:
    if [ -e "/lib/modules/$RELEASE/modules.dep" ]; then 
	echo_color 2 "Updating module dependency list for $RELEASE:  /sbin/depmod --quick"
	/sbin/depmod --quick
    else 
	echo_color 2 "Creating module dependency list for $RELEASE:  /sbin/depmod --all"
	/sbin/depmod --all
    fi

    if [ -x "/etc/init.d/rc.modules" ]; then
	/etc/init.d/rc.modules
    fi

#    if [ "$UDEV" = eudev ]; then
#	echo initializing udev...
#        /usr/bin/udevd --daemon
#        /usr/bin/udevadm trigger --action=add --type=subsystems
#        /usr/bin/udevadm trigger --action=add --type=devices
#    else # use busybox mdev as fallback:
#	echo loading modules...
#	find /sys -name modalias | xargs sort -u | xargs modprobe
#	MODULE=`find /sys -name modalias | xargs sort -u | xargs echo`
#	for i in $MODULE; do
#		modprobe $i >/dev/null 2>/dev/null
#	done
#	
#	echo initializing mdev...
#        echo /sbin/mdev > /proc/sys/kernel/hotplug
#        busybox mdev -s
#    fi

    echo_color 2 "setting hostname..."
    echo "$HOSTNAME" >| /proc/sys/kernel/hostname

    echo_color 2 "mounting..."
    /bin/mount -a

    echo start syslogd
    /sbin/syslogd

    #===================
    # load /etc/init.d/rc.network
    if [ -x /etc/init.d/rc.network ]; then
        echo_color 2 "loading /etc/init.d/rc.network..."
        /etc/init.d/rc.network
    fi

#    echo starting supervisor
#    /bin/runsvdir /var/services/ &

#    if [ -e "/etc/keymap" ]; then
#        echo load keyboard
#        loadkmap < /etc/keymap
#    fi

    #===================
    # load /etc/init.d/rc.local
    if [ -x /etc/init.d/rc.local ]; then
        echo_color 2 "loading /etc/init.d/rc.local..."
        /etc/init.d/rc.local
    fi

    /bin/dmesg > /var/log/dmesg

    echo_color 2 ""
    echo_color 2 "Welcome to"
    echo_color 2 ""
    echo_color 2 " ____      __  __            __            "
    echo_color 2 "|    |    |__||  |  _____   |  |  _____    "
    echo_color 2 "|    |    |  ||  |  \__  \  |  |  \__  \   "
    echo_color 2 "|    |___ |  ||  |__ / __ \_|  |__ / __ \_ "
    echo_color 2 "|_______ \|__||____/(____  /|____/(____  / "
    echo_color 2 "        \/               \/       Linux\/  "

    /bin/respawn -d 2 /sbin/getty /dev/tty1

}

on_shutdown() {

    #===================
    # load /etc/init.d/rc.local_shutdown
    if [ -x /etc/init.d/rc.local_shutdown ]; then
        echo loading /etc/init.d/rc.local_shutdown...
        /etc/init.d/rc.local_shutdown
    fi

    echo stopping services
    sv stop /var/services/*

    #===================
    # shut down udev
    echo shutting down udev...
    if [ "$UDEV" = systemd ]; then
        killall systemd-udevd
    elif [ "$UDEV" = eudev ]; then
        killall udevd
    fi

    #===================
    # umount the API filesystem
    #echo unmounting API filesystem...
    #umount -r /run
}

echo_color() {
  color="$1"
  shift
  printf "\033[1;3%sm%s\033[00m\n" "$color" "$*"
}


#===================
# handle arguments
case "$1" in
init)
    on_boot;;
shutdown)
    on_shutdown;;
*)
    echo "This is an init script! Don't run as normal program"
esac
